{"ast":null,"code":"import * as CONFIG from './../config/config';\nimport * as i0 from \"@angular/core\";\nexport class GameService {\n  constructor() {\n    this.width = CONFIG.playGroundWidth;\n    this.height = CONFIG.playGroundHeight;\n    this.frameNumber = CONFIG.frameNumber;\n    this.player = {\n      x: CONFIG.playGroundWidth / 2 - CONFIG.playerCar.width,\n      y: CONFIG.playGroundHeight - (CONFIG.playerCar.height + CONFIG.playerCar.height / 2)\n    };\n    this.obstacles = [];\n    this.image = null;\n    this.gameLoop = null;\n    this.moveUP = false;\n    this.moveDown = false;\n    this.moveLeft = false;\n    this.moveRight = false;\n  }\n  loadAssets(canvasElement) {\n    this.context = canvasElement.getContext('2d');\n    canvasElement.width = this.width;\n    canvasElement.height = this.height;\n    return new Promise((resolve, reject) => {\n      this.image = new Image();\n      this.image.src = CONFIG.spritePath;\n      this.image.width = 58;\n      this.image.height = 128;\n      this.image.onload = () => {\n        resolve();\n      };\n    });\n  }\n  startGameLoop() {\n    this.gameLoop = setInterval(() => {\n      this.suffleProperties();\n      this.cleanGround();\n      this.createObstacles();\n      this.moveObstacles();\n      this.createPlayer();\n    }, 10);\n  }\n  animationFrame(n) {\n    if (this.frameNumber / n % 1 === 0) {\n      return true;\n    }\n    return false;\n  }\n  suffleProperties() {\n    this.frameNumber += 1;\n  }\n  createObstacles() {\n    if (this.frameNumber === 1 || this.animationFrame(100)) {\n      if (this.obstacles.length > 20) {\n        this.obstacles.splice(0, 5);\n      }\n      this.getSingleObstacle();\n    }\n  }\n  getSingleObstacle() {\n    const context = this.context;\n    const image = this.image;\n    const randomVehicle = CONFIG.vehicles[Math.floor(Math.random() * CONFIG.vehicles.length)];\n    this.obstacles.push(new function () {\n      this.x = Math.floor(Math.random() * 350) + 0, this.y = Math.floor(Math.random() * -15) + 0, this.width = randomVehicle.width;\n      this.height = randomVehicle.height;\n      this.update = () => {\n        context.drawImage(image, randomVehicle.sX, randomVehicle.sY, randomVehicle.sWidth, randomVehicle.sHeight, this.x, this.y, randomVehicle.width, randomVehicle.height);\n      };\n    }());\n  }\n  moveObstacles() {\n    this.obstacles.forEach((element, index) => {\n      element.y += 3;\n      element.update();\n      this.detectCrash(element);\n      if (element.y > this.height) {\n        this.obstacles.splice(index, 1);\n      }\n    });\n  }\n  createPlayer() {\n    if (this.moveUP) {\n      if (this.player.y === 0) {\n        this.player.y = 0;\n      } else {\n        this.player.y -= CONFIG.playerCarSpeed;\n      }\n    } else if (this.moveDown) {\n      if (this.player.y + CONFIG.playerCar.height === CONFIG.playGroundHeight || this.player.y + CONFIG.playerCar.height > CONFIG.playGroundHeight) {\n        this.player.y = CONFIG.playGroundHeight - CONFIG.playerCar.height;\n      } else {\n        this.player.y += CONFIG.playerCarSpeed;\n      }\n    } else if (this.moveLeft) {\n      if (this.player.x === 0 || this.player.x < 0) {\n        this.player.x = 0;\n      } else {\n        this.player.x -= CONFIG.playerCarSpeed;\n      }\n    } else if (this.moveRight) {\n      if (this.player.x + CONFIG.playerCar.sWidth === CONFIG.playGroundWidth || this.player.x + CONFIG.playerCar.sWidth > CONFIG.playGroundWidth) {\n        this.player.x = CONFIG.playGroundWidth - CONFIG.playerCar.width;\n      } else {\n        this.player.x += CONFIG.playerCarSpeed;\n      }\n    }\n    this.context.drawImage(this.image, CONFIG.playerCar.sX, CONFIG.playerCar.sY, CONFIG.playerCar.sWidth, CONFIG.playerCar.sHeight, this.player.x, this.player.y, CONFIG.playerCar.width, CONFIG.playerCar.height);\n  }\n  detectCrash(obstacle) {\n    const componentLeftSide = obstacle.x;\n    const componentRightSide = obstacle.x + obstacle.width;\n    const componentTop = obstacle.y;\n    const componentBottom = obstacle.y + obstacle.height;\n    const carRightSide = this.player.x + CONFIG.playerCar.width;\n    const carLeftSide = this.player.x;\n    const carTop = this.player.y;\n    const carBottom = this.player.y + CONFIG.playerCar.height;\n    if (carRightSide > componentLeftSide && carTop < componentBottom && carLeftSide < componentRightSide && carTop < componentBottom && carRightSide > componentLeftSide && carBottom > componentTop && carLeftSide < componentRightSide && carBottom > componentTop) {\n      clearInterval(this.gameLoop);\n      alert('Game Over');\n      window.location.reload();\n    }\n  }\n  cleanGround() {\n    this.context.clearRect(0, 0, CONFIG.playGroundWidth, CONFIG.playGroundHeight);\n  }\n}\nGameService.ɵfac = function GameService_Factory(t) {\n  return new (t || GameService)();\n};\nGameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GameService,\n  factory: GameService.ɵfac\n});","map":{"version":3,"names":["CONFIG","GameService","constructor","width","playGroundWidth","height","playGroundHeight","frameNumber","player","x","playerCar","y","obstacles","image","gameLoop","moveUP","moveDown","moveLeft","moveRight","loadAssets","canvasElement","context","getContext","Promise","resolve","reject","Image","src","spritePath","onload","startGameLoop","setInterval","suffleProperties","cleanGround","createObstacles","moveObstacles","createPlayer","animationFrame","n","length","splice","getSingleObstacle","randomVehicle","vehicles","Math","floor","random","push","update","drawImage","sX","sY","sWidth","sHeight","forEach","element","index","detectCrash","playerCarSpeed","obstacle","componentLeftSide","componentRightSide","componentTop","componentBottom","carRightSide","carLeftSide","carTop","carBottom","clearInterval","alert","window","location","reload","clearRect","factory","ɵfac"],"sources":["C:\\Users\\bhavn\\carracinggame\\src\\app\\services\\game.service.ts"],"sourcesContent":["import { Injectable, Input } from '@angular/core';\r\n\r\nimport * as CONFIG from './../config/config';\r\nimport { Obstacles } from './../interfaces/obstacles';\r\nimport { SingleObstacles } from './../interfaces/single-obstacle';\r\nimport { PlayerPosition } from './../interfaces/player-position';\r\n\r\n@Injectable()\r\nexport class GameService {\r\n\r\n\t@Input() public width: number = CONFIG.playGroundWidth;\r\n\t@Input() public height: number = CONFIG.playGroundHeight;\r\n\tframeNumber: number = CONFIG.frameNumber;\r\n\tplayer: PlayerPosition = {\r\n\t\tx: CONFIG.playGroundWidth / 2 - CONFIG.playerCar.width,\r\n\t\ty: CONFIG.playGroundHeight - (CONFIG.playerCar.height + CONFIG.playerCar.height / 2),\r\n\t};\r\n\r\n\tcontext: CanvasRenderingContext2D;\r\n\tobstacles: Array<Obstacles> = [];\r\n\timage: HTMLImageElement = null;\r\n\tgameLoop =  null;\r\n\tmoveUP = false;\r\n\tmoveDown = false;\r\n\tmoveLeft = false;\r\n\tmoveRight = false;\r\n\r\n\tloadAssets(canvasElement: HTMLCanvasElement): Promise<void>  {\r\n\t\tthis.context = canvasElement.getContext('2d');\r\n\t\tcanvasElement.width = this.width;\r\n\t\tcanvasElement.height = this.height;\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.image = new Image();\r\n\t\t\tthis.image.src = CONFIG.spritePath;\r\n\t\t\tthis.image.width = 58;\r\n\t\t\tthis.image.height = 128;this.image.onload = () => {\r\n        resolve();\r\n      };\r\n\t\t});\r\n\t}\r\n\r\n\tstartGameLoop() {\r\n\t\tthis.gameLoop = setInterval(() => {\r\n\t\t\tthis.suffleProperties();\r\n\t\t\tthis.cleanGround();\r\n\t\t\tthis.createObstacles();\r\n\t\t\tthis.moveObstacles();\r\n\t\t\tthis.createPlayer();\r\n\t\t}, 10);\r\n\t}\r\n\r\n\tanimationFrame(n: number): boolean {\r\n\t\tif ((this.frameNumber / n) % 1 === 0) { return true; }\r\n\t\treturn false;\r\n\t}\r\n\r\n\tsuffleProperties(): void {\r\n\t\tthis.frameNumber += 1;\r\n\t}\r\n\r\n\tcreateObstacles(): void {\r\n\t\tif (this.frameNumber === 1 || this.animationFrame(100)) {\r\n\t\t\tif (this.obstacles.length > 20) {\r\n\t\t\t\tthis.obstacles.splice(0, 5);\r\n\t\t\t}\r\n\t\t\tthis.getSingleObstacle();\r\n\t\t}\r\n\t}\r\n\r\n\tgetSingleObstacle(): void {\r\n\t\tconst context: CanvasRenderingContext2D = this.context;\r\n\t\tconst image: HTMLImageElement = this.image;\r\n\t\tconst randomVehicle: SingleObstacles = CONFIG.vehicles[Math.floor(Math.random() * CONFIG.vehicles.length)];\r\n\r\n\t\tthis.obstacles.push(new function () {\r\n\t\t\tthis.x = Math.floor(Math.random() * 350) + 0,\r\n\t\t\tthis.y = Math.floor(Math.random() * -15) + 0,\r\n\t\t\tthis.width = randomVehicle.width;\r\n\t\t\tthis.height = randomVehicle.height;\r\n\t\t\tthis.update = () => {\r\n\t\t\t\tcontext.drawImage(\r\n\t\t\t\t\timage,\r\n\t\t\t\t\trandomVehicle.sX, randomVehicle.sY,\r\n\t\t\t\t\trandomVehicle.sWidth, randomVehicle.sHeight,\r\n\t\t\t\t\tthis.x, this.y,\r\n\t\t\t\t\trandomVehicle.width, randomVehicle.height\r\n\t\t\t\t);\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tmoveObstacles(): void {\r\n\t\tthis.obstacles.forEach((element: Obstacles, index: number) => {\r\n\t\t\telement.y += 3;\r\n\t\t\telement.update();\r\n\t\t\tthis.detectCrash(element);\r\n\t\t\tif (element.y > this.height) {\r\n\t\t\t\tthis.obstacles.splice(index, 1);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tcreatePlayer(): void {\r\n\t\tif (this.moveUP) {\r\n\t\t\tif (this.player.y === 0) {\r\n\t\t\t\tthis.player.y = 0;\r\n\t\t\t} else {\r\n\t\t\t\tthis.player.y -= CONFIG.playerCarSpeed;\r\n\t\t\t}\r\n\t\t} else if (this.moveDown) {\r\n\t\t\tif (this.player.y + CONFIG.playerCar.height === CONFIG.playGroundHeight ||\r\n\t\t\t\tthis.player.y + CONFIG.playerCar.height > CONFIG.playGroundHeight) {\r\n\t\t\t\tthis.player.y = CONFIG.playGroundHeight - CONFIG.playerCar.height;\r\n\t\t\t} else {\r\n\t\t\t\tthis.player.y += CONFIG.playerCarSpeed;\r\n\t\t\t}\r\n\t\t} else if (this.moveLeft) {\r\n\t\t\tif (this.player.x === 0 || this.player.x < 0 ) {\r\n\t\t\t\tthis.player.x = 0;\r\n\t\t\t} else {\r\n\t\t\t\tthis.player.x -= CONFIG.playerCarSpeed;\r\n\t\t\t}\r\n\t\t} else if (this.moveRight) {\r\n\t\t\tif (this.player.x + CONFIG.playerCar.sWidth === CONFIG.playGroundWidth ||\r\n\t\t\t\tthis.player.x + CONFIG.playerCar.sWidth > CONFIG.playGroundWidth) {\r\n\t\t\t\tthis.player.x = CONFIG.playGroundWidth - CONFIG.playerCar.width;\r\n\t\t\t} else {\r\n\t\t\t\tthis.player.x += CONFIG.playerCarSpeed;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.context.drawImage(\r\n\t\t\tthis.image,\r\n\t\t\tCONFIG.playerCar.sX, CONFIG.playerCar.sY,\r\n\t\t\tCONFIG.playerCar.sWidth, CONFIG.playerCar.sHeight,\r\n\t\t\tthis.player.x, this.player.y,\r\n\t\t\tCONFIG.playerCar.width, CONFIG.playerCar.height,\r\n\t\t);\r\n\t}\r\n\r\n\tdetectCrash(obstacle: Obstacles ): void {\r\n\r\n\t\tconst componentLeftSide = obstacle.x;\r\n\t\tconst componentRightSide = obstacle.x + obstacle.width;\r\n\t\tconst componentTop = obstacle.y;\r\n\t\tconst componentBottom = obstacle.y + obstacle.height;\r\n\r\n\t\tconst carRightSide = this.player.x + CONFIG.playerCar.width;\r\n\t\tconst carLeftSide = this.player.x;\r\n\t\tconst carTop = this.player.y;\r\n\t\tconst carBottom = this.player.y + CONFIG.playerCar.height;\r\n\r\n\t\tif ((\r\n\t\t\t\t(carRightSide > componentLeftSide) && (carTop < componentBottom)\r\n\t\t\t) && (\r\n\t\t\t\t(carLeftSide < componentRightSide) && (carTop < componentBottom)\r\n\t\t\t) && (\r\n\t\t\t\t(carRightSide > componentLeftSide) && (carBottom > componentTop)\r\n\t\t\t) && (\r\n\t\t\t\t(carLeftSide < componentRightSide) && (carBottom > componentTop)\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tclearInterval(this.gameLoop);\r\n\t\t\talert('Game Over');\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\t}\r\n\r\n\tcleanGround(): void {\r\n\t\tthis.context.clearRect(0, 0, CONFIG.playGroundWidth, CONFIG.playGroundHeight);\r\n\t}\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}